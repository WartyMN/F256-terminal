SYMBOLS {
    __HIMEM__:        type = weak,   value = $C000; # from this point forward we have I/O area and Kernal
    __OVERLAYSIZE__: type = weak, value = $2000; # 8192 bytes
    __OVERLAYSTART__: type = export, value = __HIMEM__ - __OVERLAYSIZE__; # $A000 - $BFFF
    __INTERBANKBUFFSTART__:  type = export,   value = $0400; # A 1-page (256b) buffer available regardless of MMU setting, at a fixed loc.
    __INTERBANKBUFFSIZE__:  type = weak,   value = $100;
    __GAMESAVESIZE__:  type = weak,   value = $0299; # game level (1b) + player data (664b)
    __GAMESAVESTART__:  type = export,   value = __INTERBANKBUFFSTART__ + __INTERBANKBUFFSIZE__; # out of cc65 space area for loading and using player save data;
    __STACKSIZE__:    type = weak,   value = $0700; # 1.75k stack
    __STACKSTART__:   type = weak,   value = (__OVERLAYSTART__ - 1) - __STACKSIZE__; #9900
    __MAINSTART__:  type = export,   value = __GAMESAVESTART__ + __GAMESAVESIZE__; # $0500 + $299 = $799
    __MAINSIZE__:  type = weak,   value = __STACKSTART__ - __MAINSTART__;
}
MEMORY {
    ZP_LK:    file = "", define = yes, start = $0010,                   size = $2c;
    ZP:       file = "", define = yes, start = $0040,                   size = $00F0 - $0040;
	KERNEL:   file = "", define = yes, start = $00f0,                   size = $10;
	MAIN:     file = %O, define = yes, start = __MAINSTART__,           size = __MAINSIZE__;
    OVL1:     file = "%O.1",           start = __OVERLAYSTART__ + 0, 	size = __OVERLAYSIZE__;
    OVL2:     file = "%O.2",           start = __OVERLAYSTART__ + 0, 	size = __OVERLAYSIZE__;
}
SEGMENTS {
    ZEROPAGE:				load = ZP,       type = zp;
    ZEROPAGE_LK:			load = ZP_LK,    type = zp, define = yes;
    KERNEL_ARGS:			load = KERNEL,   type = zp;
    STARTUP:				load = MAIN,     type = ro;
    LOWCODE:				load = MAIN,     type = ro,                optional = yes;
    ONCE:					load = MAIN,     type = ro,                optional = yes;
    CODE:					load = MAIN,     type = ro;
    RODATA:					load = MAIN,     type = ro;
    DATA:					load = MAIN,     type = rw;
    INIT:					load = MAIN,     type = bss;
    BSS:     				load = MAIN,     type = bss, define = yes;
    OVERLAY_SCREEN: 		load = OVL1,     type = ro,  define = yes, optional = yes;
    OVERLAY_STARTUP: 		load = OVL2,     type = ro,  define = yes, optional = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
